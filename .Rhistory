fill=cols, bty = 'n')
dev.off()
load("~/Dropbox/UCI/Research/Prediction Assessment/weighted_EPE/simstudy_setpath.RData")
setpath = simresults
colnames(setpath[[1]])
# check number of missing values
n.na.setpathpersim = do.call("rbind",lapply(setpath,function(y){
apply(y,2,function(x){sum(is.na(x))})}))
apply(n.na.setpathpersim,2,table)
# CV: 2 sims with NAs, 1 with 1 model + 1 with 2 models
# BS: 41 sims; 14 with 1 model, 9 with 2 models, 3 with 14 models
n.est = ncol(setpath[[1]])
ylabs = c("receive calls","educ", "exercise",
"age","enewsletter", "race & ethnicity",
"RAQ", "CFI", "educsq","agesq", "join > 3/19/20",
"English primary", "receive mail","N. medical cond.",
"sex", "referral method", "CFIsq", "RAQsq", "medications" )
n.p = length(scope)
# scope = c("rcv_calls", "edu_years", "signup_enewsletter", "raq", "age", "race_eth", "exercise",
#           "cfi", "I(age^2)", "I(edu_years^2)", "engl_primary", "enr_post_031920",
#           "female", "rcv_mail", "num_medical_conditions", "I(raq^2)", "ref_top",
#           "I(cfi^2)", "meds")
# remove simulation with NA
nasim = which(unlist(lapply(setpath,function(x){class(x)[[1]]}))!="matrix")
# no samples drawn without all levels now that I removed rcv_emails
setresults1 = lapply(1:n.est,function(y){do.call("rbind",
lapply(setpath,function(x){x[,y]}))})
names(setresults1) = colnames(setpath[[1]])
setresults = setresults1[c(1,3,5,7,9,2,4,6,8)] # reorder
cbind(names(setresults),
as.character(labs))
# get mean estimates
results.mean = do.call("cbind",lapply(setresults,function(x){colMeans(x,na.rm = TRUE)}))
cols.methods = c("black",rep(viridis(5)[2:5],2)) # order colnames(results.mean)
ltys.methods = c(1,rep(4,4),rep(1,4))
ylabs2 = c("1",paste("+", ylabs))
vars.spot = c(which(ylabs2 == "+ agesq"),
which(ylabs2 == "+ CFIsq"),
which(ylabs2 == "+ RAQsq"),
which(ylabs2 == "+ educsq"))
ylabs2[vars.spot] = c(expression(+~age^2), expression(+~CFI^2),
expression(+~RAQ^2), expression(+~educ^2))
smooth.plot = function(x,y, n.point = 100, alpha = 0.2){
# takes x and y and returns points for a smoothed line
# with n.point number of points
x.smooth = seq(min(x),max(x),length.out = n.point)
y.smooth = predict(loess(y~x, span = alpha), newdata = x.smooth)
out = data.frame(x = x.smooth, y = y.smooth)
return(out)
}
pdf("~/Dropbox/UCI/Research/Prediction Assessment/weighted_EPE/figures/sim_setpath.pdf",
width = 6.5, height = 4)
par(oma = c(2,0,0,6.1), xpd = NA,
mfrow = c(1,2),
mar = c(5,3,4,0) + .1,
cex = .8, cex.axis = .8,
mgp = c(2,1,0))
plot(1:(n.p+1),
results.mean[,1],
type = 'l',
col = cols.methods[1],
ylim = range(results.mean, na.rm = TRUE),
ylab = "Mean Log-Likelihood Loss",
xlab = "",
lwd = 3,
xaxt = 'n'
)
title(main = list("Weighted and Unweighted Estimates",
cex = 1.1, font = 1), line = 1)
for(i in 2:n.est){
lines(1:(n.p+1),results.mean[,i], lty = ltys.methods[i],
col = cols.methods[i], lwd = 3)
}
axis(1,at = 1:(n.p+1),
labels = ylabs2, las = 2)
plot(smooth.plot(1:(n.p+1), results.mean[,1]),
type = 'l',
col = cols.methods[1],
ylim = range(results.mean[,c(1,6:9)], na.rm = TRUE),
ylab = "Mean Log-Likelihood Loss",
xlab = "",
lwd = 3,
xaxt = 'n')
title(main = list("Zoomed to Weighted Estimates",
cex = 1.1, font = 1), line = 1)
for(i in 6:9){
lines(smooth.plot(1:(n.p+1),results.mean[,i]), lty = ltys.methods[i],
col = cols.methods[i], lwd = 3)
}
title(main = "Comparing Estimates of EPE",
outer = TRUE, line = -1.5)
legend(n.p+1.5,2895,labs,
col = cols.methods, # methods reordered for legend
lty = ltys.methods, lwd = 3,
bty = 'n',
cex = .8,
y.intersp=1.4)
axis(1,at = 1:(n.p+1),
labels = ylabs2, las = 2)
dev.off()
300*52
library(RColorBrewer)
source("~/Dropbox/helper.R")
make.plot.smooth.coefX = function(coef.save,
ylim.percent = NULL,
ylim.absolute = NULL,
title = NULL,
plot.points = TRUE,
xlab = "Coefficient Magnitude",
ylab = "Absolute Bias (vs SRS)",
alpha1 = .9,
alpha2 = .9,
beta.list, xaxt = NULL){
# get percent and absolute bias vs SRS
SRS = matrix(rep(coef.save[,1],6), nrow = length(beta.list),ncol = 6)
BS = coef.save[,2:7]
# Percent.bias = abs((BS-SRS)/SRS*100)
Absolute.bias = abs(BS-SRS)
if(is.null(ylim.absolute)){
ylim.absolute = c(0,max(Absolute.bias))
}
cols = brewer.pal(5, name = "Set1")[2:5]
cols2 = cols[c(1,3)]
plot(smooth.plot(beta.list, Absolute.bias[,1], alpha = alpha1), type = 'l',
col = cols[1], lwd = 2,
xlab = "",
ylab = "",
xaxt = xaxt,
ylim = ylim.absolute,
main = title)
title(ylab = ylab, line = 2.2)
title(xlab = xlab, line = 2.2)
lines(smooth.plot(beta.list, abs(coef.save[,8]-coef.save[,1])),
lwd = 2, lty = 3)
lines(beta.list, rep(0,length(beta.list)),lwd=2)
for(k in 2){
lines(smooth.plot(beta.list, Absolute.bias[,k], alpha = alpha1),lwd = 2,
col = cols[k])
}
for(k in 3:4){
lines(smooth.plot(beta.list, Absolute.bias[,k], alpha = alpha2),lwd = 2,
col = cols[k])
}
# estimates from true propensity score
for(k in 1:2){
lines(smooth.plot(beta.list, Absolute.bias[,k+4], alpha = alpha1),lwd = 2,
col = cols2[k], lty = 3)
}
if(plot.points == TRUE){
points(beta.list, Absolute.bias[,1],pch = 18,
col = cols[1])
for(k in 2:4){
points(beta.list, Absolute.bias[,k],pch = 18,
col = cols[k])
}
for(k in 1:2){
points(beta.list, Absolute.bias[,k+4],pch = 18,
col = cols2[k])
}
}
}
make.plot.notsmooth.coefX = function(coef.save,
ylim.percent = NULL,
ylim.absolute = NULL,
title = NULL,
plot.points = TRUE,
xlab = "Coefficient Magnitude",
ylab = "Absolute Bias",
alpha = .8,
beta.list){
# get percent and absolute bias vs SRS
SRS = matrix(rep(coef.save[,1],6), nrow = length(beta.list),ncol = 6)
BS = coef.save[,2:7]
# Percent.bias = abs((BS-SRS)/SRS*100)
Absolute.bias = abs(BS-SRS)
if(is.null(ylim.absolute)){
ylim.absolute = c(0,max(Absolute.bias))
}
cols = brewer.pal(5, name = "Set1")[2:5]
cols2 = cols[c(1,3)]
plot(beta.list, Absolute.bias[,1], type = 'l',
col = cols[1], lwd = 2,
xlab = xlab,
ylab = ylab, ylim = ylim.absolute,
main = title)
lines(beta.list, abs(coef.save[,8]-coef.save[,1]),
lwd = 2, lty = 3)
lines(beta.list, rep(0,length(beta.list)),lwd=2)
for(k in 2:4){
lines(beta.list, Absolute.bias[,k],lwd = 2,
col = cols[k])
}
# estimates from true propensity score
for(k in 1:2){
lines(beta.list, Absolute.bias[,k+4],lwd = 2,
col = cols2[k], lty = 3)
}
if(plot.points == TRUE){
points(beta.list, Absolute.bias[,1],pch = 18,
col = cols[1])
for(k in 2:4){
points(beta.list, Absolute.bias[,k],pch = 18,
col = cols[k])
}
for(k in 1:2){
points(beta.list, Absolute.bias[,k+4],pch = 18,
col = cols2[k])
}
}
}
make.plot.perc.smooth.coefX = function(coef.save,
ylim.percent = NULL,
ylim.absolute = NULL,
title = NULL,
plot.points = TRUE,
xlab = "Coefficient Magnitude",
ylab = "Relative Bias",
alpha = .4,
beta.list){
# get percent and absolute bias vs SRS
SRS = matrix(rep(coef.save[,1],6), nrow = length(beta.list),ncol = 6)
BS = coef.save[,2:7]
# Percent.bias = abs((BS-SRS)/SRS*100)
Absolute.bias = abs((BS-SRS)/SRS)
if(is.null(ylim.absolute)){
ylim.absolute = c(0,max(Absolute.bias))
}
cols = brewer.pal(5, name = "Set1")[2:5]
cols2 = cols[c(1,3)]
plot(smooth.plot(beta.list, Absolute.bias[,1], alpha = alpha), type = 'l',
col = cols[1], lwd = 2,
xlab = xlab,
ylab = ylab, ylim = ylim.absolute,
main = title)
for(k in 2:4){
lines(smooth.plot(beta.list, Absolute.bias[,k], alpha = alpha),lwd = 2,
col = cols[k])
}
# estimates from true propensity score
for(k in 1:2){
lines(smooth.plot(beta.list, Absolute.bias[,k+4], alpha = alpha),lwd = 2,
col = cols2[k], lty = 3)
}
lines(smooth.plot(beta.list, abs((coef.save[,8]-coef.save[,1])/coef.save[,1])),
lwd = 2, lty = 3)
lines(beta.list, rep(0,length(beta.list)),lwd=2)
if(plot.points == TRUE){
points(beta.list, Absolute.bias[,1],pch = 18,
col = cols[1])
for(k in 2:4){
points(beta.list, Absolute.bias[,k],pch = 18,
col = cols[k])
}
# for(k in 1:2){
#   points(beta.list, Absolute.bias[,k+4],pch = 18,
#          col = cols2[k])
# }
}
}
colnames = c("SRS", paste("Biased:",c("No weighting", "Weighted prop model", "Weighted outcome model", "Both weighted",
"No weighting - True prop", "Weighted outcome - True prop")),
"SRS weighted")
cols = brewer.pal(5, name = "Set1")[2:5]
cols2 = cols[c(1,3)]
path = "~/Dropbox/UCI/Research/Prediction Assessment/weighted_propensity_scores/simstudy/"
#### Vary correlation ####
pdf(paste0(path,"figures/figures/varycorr.pdf"),
width = 6.5, height = 5)
par(mfrow = c(1,1),
mar = c(3.1, 3.1, 1.6, .6),
oma = c(.3,.3,.5,6.3), xpd = NA)
#### Vary correlation ####
pdf(paste0(path,"figures/varycorr.pdf"),
width = 6.5, height = 5)
par(mfrow = c(1,1),
mar = c(3.1, 3.1, 1.6, .6),
oma = c(.3,.3,.5,6.3), xpd = NA)
# beta.list <- cor.list <- .05*(1:14)
load(paste0(path,"coefvary_corr.RData"))
coefvary_mvn = do.call("rbind",simresults)
c.list = c(.05*(1:19),.96,.97,.98,.99,.999,1)
make.plot.perc.smooth.coefX(coefvary_mvn,#[27:51,],
#ylim.absolute = c(0,2),
plot.points = FALSE,
title = "Vary correlation",
xlab = "",
ylab = "",
beta.list = c.list,
alpha = .6)
title(xlab = expression(paste("Correlation: ",rho)), line = 2.2)
title(ylab = "Relative Bias (vs SRS)", line = 2.2)
legend(1.04,.55,
legend = c("SRS\nEst. prop. score","SRS\nTrue prop. score",
paste0("Conv. Sample: ", c("\nNo weights\nEst prop. score",
"\nNo weights\nTrue prop. score",
"\nWeight prop. model\nEst. prop. score",
"\nWeight outcome model\nEst. prop. score",
"\nWeight outcome model\nTrue prop. score",
"\nWeight both models\nEst. prop score"))),
col = c("black","black",cols[1], cols[1],cols[2:3],cols[3:4],cols[4:5]), lwd = rep(2,8),
lty = c(1,3,1,3,1,1,3,1),
bty = 'n', cex = .6,
y.intersp=2.1)
dev.off()
#### varying coefficients in the propensity score model ####
library(patchwork)
library(latticeExtra)
library(viridis)
beta.list = .1*(5:20)
load(paste0(path,"coefvary_propmodel_2.RData"))
prop_2 = simresults
load(paste0(path,"coefvary_propmodel_3.RData"))
prop_3 = simresults
data1 <- expand.grid(K0=beta.list, K1=beta.list)
data1$bias_2<- unlist(lapply(prop_2,function(x){abs(x[4]-x[1])}))
data1$bias_3<- unlist(lapply(prop_3,function(x){abs(x[4]-x[1])}))
data1$model = "Weighted Outcome Model"
# weighting both models
data2 <- expand.grid(K0=beta.list, K1=beta.list)
data2$bias_2<- unlist(lapply(prop_2,function(x){abs(x[5]-x[1])}))
data2$bias_3<- unlist(lapply(prop_3,function(x){abs(x[5]-x[1])}))
data2$model = "Weighted Propensity and Outcome Models"
data.comb = rbind(data1, data2)
data.comb$model = as.factor(data.comb$model)
jpeg(paste0(path,"figures/vary_promodel_X2.jpeg"),
width = 8.5, height = 5,
units = "in", res = 1000)
levelplot(bias_2 ~ K0 * K1 | model, data.comb,
panel = panel.2dsmoother, n = 200,
xlab = expression(paste(alpha["02"],": Exp. Coef. on K*",X[2], " in Propensity Model")),
ylab = expression(paste(alpha["12"],": Exp. Coef. on (1-K)*",X[2], " in Propensity Model")),
main = "Bias in Treatment Effect Estimate Relative to SRS",
col.regions = viridis(100),
at = .05*(-1:13), # functions as a zlim
scales = list(alternating = 1, tck = c(1,0)),
strip = strip.custom(bg = "grey90"))
dev.off()
pdf(paste0(path,"figures/varycoef_cor1.pdf"),
width = 6.5, height = 5)
par(mfrow = c(2,3),
mar = c(3.1, 3.1, 1.6, .6),
oma = c(.3,.3,2.5,7.3), xpd = NA)
beta.list = (-10:10)/2
load(paste0(path,"coefvary_T_1.RData"))
coefvary_T = do.call("rbind",simresults)
make.plot.smooth.coefX(coefvary_T,
ylim.absolute = c(0,2),
plot.points = FALSE,
title = expression(paste("Vary ",delta[A])),
ylab = "Absolute Bias (vs SRS)",
beta.list = beta.list,
xlab = expression(delta[A]))
load(paste0(path,"coefvary_TK_1.RData"))
coefvary_TK = do.call("rbind",simresults)
make.plot.smooth.coefX(coefvary_TK,
ylim.absolute = c(0,2),
plot.points = FALSE,
alpha1 = .4,
alpha2 = .9,
title = expression(paste("Vary ",delta[AK])),
ylab = "Absolute Bias (vs SRS)",
beta.list = beta.list,
xlab = expression(delta[AK]))
load(paste0(path,"coefvary_X3_1.RData"))
coefvary_X3 = do.call("rbind",simresults)
make.plot.smooth.coefX(coefvary_X3,
ylim.absolute = c(0,2),
plot.points = FALSE,
title = expression(paste("Vary ",delta[2])),
ylab = "Absolute Bias (vs SRS)",
beta.list = beta.list,
xlab = expression(delta[2]))
legend(5.9,1.1,
legend = c("SRS\nEst. prop. score","SRS\nTrue prop. score",
paste0("Conv. Sample: ", c("\nNo weights\nEst prop. score",
"\nNo weights\nTrue prop. score",
"\nWeight prop. model\nEst. prop. score",
"\nWeight outcome model\nEst. prop. score",
"\nWeight outcome model\nTrue prop. score",
"\nWeight both models\nEst. prop score"))),
col = c("black","black",cols[1], cols[1],cols[2:3],cols[3:4],cols[4:5]), lwd = rep(2,8),
lty = c(1,3,1,3,1,1,3,1),
bty = 'n', cex = .6,
y.intersp=2.1)
load(paste0(path,"coefvary_X4_1.RData"))
coefvary_X4 = do.call("rbind",simresults)
make.plot.smooth.coefX(coefvary_X4,
ylim.absolute = c(0,2),
plot.points = FALSE,
title = expression(paste("Vary ",delta[3])),
ylab = "Absolute Bias (vs SRS)",
beta.list = beta.list,
xlab = expression(delta[3]))
load(paste0(path,"coefvary_X5_1.RData"))
coefvary_X5 = do.call("rbind",simresults)
make.plot.smooth.coefX(coefvary_X5,
ylim.absolute = c(0,2),
plot.points = FALSE,
title = expression(paste("Vary ",delta[4])),
ylab = "Absolute Bias (vs SRS)",
beta.list = beta.list,
xlab = expression(delta[4]))
load(paste0(path,"coefvary_X6_1.RData"))
coefvary_X6 = do.call("rbind",simresults)
make.plot.smooth.coefX(coefvary_X6,
ylim.absolute = c(0,2),
plot.points = FALSE,
title = expression(paste("Vary ",delta[5])),
ylab = "Absolute Bias (vs SRS)",
beta.list = beta.list,
xlab =  expression(delta[5]))
title("Vary Coefficients in the True Outcome Model:\n K is Observed",
outer = TRUE, line = 0.4)
dev.off()
pdf(paste0(path,"figures/varycoef_cor1.pdf"),
width = 6.5, height = 5)
par(mfrow = c(2,3),
mar = c(3.1, 3.1, 1.6, .6),
oma = c(.3,.3,2.5,7.3), xpd = NA)
beta.list = (-10:10)/2
load(paste0(path,"coefvary_T_1.RData"))
coefvary_T = do.call("rbind",simresults)
make.plot.smooth.coefX(coefvary_T,
ylim.absolute = c(0,2),
plot.points = FALSE,
title = expression(paste("Vary ",delta[A])),
ylab = "Absolute Bias (vs SRS)",
beta.list = beta.list,
xlab = expression(delta[A]))
load(paste0(path,"coefvary_TK_1.RData"))
coefvary_TK = do.call("rbind",simresults)
make.plot.smooth.coefX(coefvary_TK,
ylim.absolute = c(0,2),
plot.points = FALSE,
alpha1 = .4,
alpha2 = .9,
title = expression(paste("Vary ",delta[AK])),
ylab = "Absolute Bias (vs SRS)",
beta.list = beta.list,
xlab = expression(delta[AK]))
load(paste0(path,"coefvary_X2_1.RData"))
coefvary_X3 = do.call("rbind",simresults)
make.plot.smooth.coefX(coefvary_X3,
ylim.absolute = c(0,2),
plot.points = FALSE,
title = expression(paste("Vary ",delta[2])),
ylab = "Absolute Bias (vs SRS)",
beta.list = beta.list,
xlab = expression(delta[2]))
legend(5.9,1.1,
legend = c("SRS\nEst. prop. score","SRS\nTrue prop. score",
paste0("Conv. Sample: ", c("\nNo weights\nEst prop. score",
"\nNo weights\nTrue prop. score",
"\nWeight prop. model\nEst. prop. score",
"\nWeight outcome model\nEst. prop. score",
"\nWeight outcome model\nTrue prop. score",
"\nWeight both models\nEst. prop score"))),
col = c("black","black",cols[1], cols[1],cols[2:3],cols[3:4],cols[4:5]), lwd = rep(2,8),
lty = c(1,3,1,3,1,1,3,1),
bty = 'n', cex = .6,
y.intersp=2.1)
load(paste0(path,"coefvary_X3_1.RData"))
coefvary_X4 = do.call("rbind",simresults)
make.plot.smooth.coefX(coefvary_X4,
ylim.absolute = c(0,2),
plot.points = FALSE,
title = expression(paste("Vary ",delta[3])),
ylab = "Absolute Bias (vs SRS)",
beta.list = beta.list,
xlab = expression(delta[3]))
load(paste0(path,"coefvary_X4_1.RData"))
coefvary_X5 = do.call("rbind",simresults)
make.plot.smooth.coefX(coefvary_X5,
ylim.absolute = c(0,2),
plot.points = FALSE,
title = expression(paste("Vary ",delta[4])),
ylab = "Absolute Bias (vs SRS)",
beta.list = beta.list,
xlab = expression(delta[4]))
load(paste0(path,"coefvary_X5_1.RData"))
coefvary_X6 = do.call("rbind",simresults)
make.plot.smooth.coefX(coefvary_X6,
ylim.absolute = c(0,2),
plot.points = FALSE,
title = expression(paste("Vary ",delta[5])),
ylab = "Absolute Bias (vs SRS)",
beta.list = beta.list,
xlab =  expression(delta[5]))
title("Vary Coefficients in the True Outcome Model:\n K is Observed",
outer = TRUE, line = 0.4)
dev.off()
load(paste0(path,"coefvary_X4_1.RData"))
coefvary_X5 = do.call("rbind",simresults)
make.plot.smooth.coefX(coefvary_X5,
ylim.absolute = c(0,2),
plot.points = FALSE,
title = expression(paste("Vary ",delta[4])),
ylab = "Absolute Bias (vs SRS)",
beta.list = beta.list,
xlab = expression(delta[4]))
dim(coefvary_X5)
coefvary_X5
coefvary_X6
coefvary_X2
coefvary_X3
make.plot.smooth.coefX(coefvary_X3,
ylim.absolute = c(0,2),
plot.points = FALSE,
title = expression(paste("Vary ",delta[2])),
ylab = "Absolute Bias (vs SRS)",
beta.list = beta.list,
xlab = expression(delta[2]))
